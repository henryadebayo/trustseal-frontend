import '../entities/business_owner_entity/business_owner_entity.dart';
import '../repositories/business_owner_repository.dart';

class CreateBusinessOwnerUseCase {
  final BusinessOwnerRepository repository;

  CreateBusinessOwnerUseCase(this.repository);

  Future<BusinessOwner> call(CreateBusinessOwnerParams params) async {
    final businessOwner = BusinessOwner(
      id: '', // Will be generated by repository
      name: params.name,
      email: params.email,
      organizationName: params.organizationName,
      walletAddress: params.walletAddress,
      type: params.type,
      status: VerificationStatus.pending,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
      profile: params.profile,
    );

    return await repository.createBusinessOwner(businessOwner);
  }
}

class GetBusinessOwnerUseCase {
  final BusinessOwnerRepository repository;

  GetBusinessOwnerUseCase(this.repository);

  Future<BusinessOwner> call(String id) async {
    return await repository.getBusinessOwnerById(id);
  }
}

class GetBusinessOwnerByWalletUseCase {
  final BusinessOwnerRepository repository;

  GetBusinessOwnerByWalletUseCase(this.repository);

  Future<BusinessOwner?> call(String walletAddress) async {
    try {
      return await repository.getBusinessOwnerByWalletAddress(walletAddress);
    } catch (e) {
      return null;
    }
  }
}

class UpdateBusinessOwnerUseCase {
  final BusinessOwnerRepository repository;

  UpdateBusinessOwnerUseCase(this.repository);

  Future<BusinessOwner> call(BusinessOwner businessOwner) async {
    final updatedBusinessOwner = businessOwner.copyWith(
      updatedAt: DateTime.now(),
    );
    return await repository.updateBusinessOwner(updatedBusinessOwner);
  }
}

class GetBusinessOwnersByTypeUseCase {
  final BusinessOwnerRepository repository;

  GetBusinessOwnersByTypeUseCase(this.repository);

  Future<List<BusinessOwner>> call(BusinessOwnerType type) async {
    return await repository.getBusinessOwnersByType(type);
  }
}

class GetBusinessOwnersByStatusUseCase {
  final BusinessOwnerRepository repository;

  GetBusinessOwnersByStatusUseCase(this.repository);

  Future<List<BusinessOwner>> call(VerificationStatus status) async {
    return await repository.getBusinessOwnersByStatus(status);
  }
}

class CreateBusinessOwnerParams {
  final String name;
  final String email;
  final String organizationName;
  final String walletAddress;
  final BusinessOwnerType type;
  final BusinessOwnerProfile profile;

  const CreateBusinessOwnerParams({
    required this.name,
    required this.email,
    required this.organizationName,
    required this.walletAddress,
    required this.type,
    required this.profile,
  });
}
